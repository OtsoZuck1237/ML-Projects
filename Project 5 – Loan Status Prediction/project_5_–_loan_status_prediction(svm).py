# -*- coding: utf-8 -*-
"""Project 5 â€“ Loan_status_prediction(SVM).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13grGzNycMT7XeMe8TFxkwLSGTkEMkBiZ

#Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix

"""#Data Preprocessing"""

df = pd.read_csv("/content/Loan_prediction.csv")

df.head()

#let's check how many rows and columns haben wir
df.shape

# let's check our statistical measures of our data
df.describe()

# let's check whether there are some missing values or not
df.isnull().sum()

# now let's drop the missiling values
df = df.dropna()

# let's check again whether we still have a missing values or not
df.isnull().sum()

# now let's make One-Hot-Encoding
df.replace({"Loan_Status":{'N':0, 'Y':1}}, inplace = True)

# Now let's check how our Loan_Status gewechselt hat
df.head()

# Let's check our 'Dependents' column (you will see why)
df['Property_Area'].value_counts()

# As we can see, there's written 3+, that's is actually a bad data, because of that we replace it with 4
df.replace({"Dependents":{'3+':4}}, inplace = True)

# Let's make correlation between features
corr = df[['Dependents', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History']].corr()
plt.figure(figsize = (10,10))
sns.heatmap(corr, cbar = True, square = True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='coolwarm')

# We can also plot dependences of two features
sns.countplot(x = 'Married', hue = 'Loan_Status', data = df)

# Now let's finally convert our all categorical values into the integers 1 or 0
df.replace({'Married':{'No':0, 'Yes':1}}, inplace = True)
df.replace({'Gender':{'Male':1, 'Female':0}}, inplace = True)
df.replace({'Self_Employed':{'No':0, 'Yes':1}}, inplace = True)
df.replace({'Property_Area':{'Rural':0, 'Semiurban':1, 'Urban':2}}, inplace = True)
df.replace({'Education':{'Graduate':1, 'Not Graduate':0}}, inplace = True)

df.head()

"""Now let's split our data into the train and test sets"""

df.drop(['Loan_ID'], axis = 1, inplace = True)
X = df.iloc[:, :-1].values
Y = df.iloc[:, -1].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

"""#Now let's train the model by using SVM"""

classifier = svm.SVC(kernel = 'linear')
classifier.fit(X_train, Y_train)

"""#Let's make evaluation"""

Y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
print(cm)
accuracy_score(Y_test, Y_pred)

"""#Let's make some prediction"""

input_data = (1,1,0,1,1,445234344,145,555,3244,1,1)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = classifier.predict(input_data_reshaped)
print(prediction)
if (prediction[0] == 0):
  print('The loan is not approved')
else:
  print('The loan is approved')