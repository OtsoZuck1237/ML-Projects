# -*- coding: utf-8 -*-
"""Project 3 – Boston House Prediction(XGboost Regressor).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p2g3UanE2PXVGFTCnvWW-roVxeZiMlG1

#Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#importing Dataset"""

cols = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
df = pd.read_csv('housing.csv', header=None, delimiter=r"\s+", names=cols)
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

df.head()

df.shape

df.isnull().sum() #the sum of missing values

df.describe() #the statistical measures

df.groupby('MEDV').mean() # for each uniqe median value –> mean value of other features

#Let's now cunstruct the heat map to understand the correlation between the features(how they depend on each other)
correlation = df.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='coolwarm')

"""#Splitting the Dataset into the Training and Test sets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 2)

"""#Training on XGboost Regressor"""

from xgboost import XGBRegressor
regressor = XGBRegressor()
regressor.fit(X_train, y_train)

"""#Now let's evaluate our model (R squared error) and (mean absolute error)"""

from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
y_pred = regressor.predict(X_test)
print("R squared error:", r2_score(y_test, y_pred))
print("Mean absolute error:", mean_absolute_error(y_test, y_pred))

"""#Now let's plot what we've got here!"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted vs Actual')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.legend()
plt.grid(True)
plt.show()
