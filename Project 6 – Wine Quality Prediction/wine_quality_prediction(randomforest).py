# -*- coding: utf-8 -*-
"""Project 6 â€“ Wine_Quality_Prediction(RandomForest).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KRkrYJNf_GCmZThPpJ5lZ7Z02cxeEwGS

#Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

"""#Data Preprocessing"""

df = pd.read_csv('/content/winequality-red.csv')

df.shape

df.head()

# let's check our statistical measures of our data
df.describe()

# let's check whether there are some missing values or not
df.isnull().sum()

sns.catplot(x='quality', data=df, kind='count')

# Let's make correlation between features
corr = df.corr()
plt.figure(figsize=(10,10))
sns.heatmap(corr, annot=True, cmap='coolwarm',square = True, fmt='.1f', annot_kws={'size':8})

# Let's draw a chart of volatile acidty vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='volatile acidity', data=df)
plt.show()

# Let's draw a chart of citric acid vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='citric acid', data=df)
plt.show()

# Let's draw a chart of citric acid vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='citric acid', data=df)
plt.show()

# Let's draw a chart of citric acid vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='sulphates', data=df)
plt.show()

"""Let's split our dataset and also make a label binarization"""

X = df.iloc[:, :-1].values
Y = df.iloc[:, -1].apply(lambda y: 1 if y>=7 else 0).values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 3)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

"""#Let's train our model by using Random Forest Algorithm"""

model = RandomForestClassifier()
model.fit(X_train, Y_train)

"""#Now let's evaluate our model"""

Y_pred = model.predict(X_test)
cm = confusion_matrix(Y_test, Y_pred)
print(cm)
accuracy_score(Y_test, Y_pred)

"""#Let's make some prediction!"""

input_data = (7.3,0.65,0,1.2,0.065,15,21,0.9946,3.39,0.47,10)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')
